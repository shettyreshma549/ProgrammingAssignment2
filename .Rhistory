m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- ginv(m)
m <- matrix(c(-1, -2, 1, 1), 2,2)
m
m <- matrix(c(-1, -2, 1, 1), 2,2)
solve(m)*m
m <- matrix(c(-1, -2, 1, 1), 2,2)
solve(m)%*%m
ginvm <- matrix(c(-1, -2, 1, 1), 2,2)
m
m <- matrix(c(-1, -2, 1, 1), 2,2)
solve(m)*%m
m <- matrix(c(-1, -2, 1, 1), 2,2)
solve(m)%*%m
m <- matrix(c(-1, -2, 1, 1), 2,2)
solve(m)%*%m
m <- matrix(c(-1, -2, 1, 1), 2,2)
solve(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = numeric(matrix())) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
print(y)
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setmean(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
inv<-cacheSolve(m)
inv
#solve(m)
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
inv<-cacheSolve(m)
inv
#solve(m)
## Write a short comment describing this function
cacheSolve <- function(x = numeric(matrix())) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
inv<-cacheSolve(m)
inv
#solve(m)
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
inv<-cacheSolve(m)
inv
#solve(m)
m <- matrix(c(-1, -2, 1, 1), 2,2)
x <- makeCacheMatrix(m)
inv<-cacheSolve(x)
inv
#solve(m)
m <- matrix(c(-1, -2, 1, 1,5,6,1,2,0.5), 3,3)
x <- makeCacheMatrix(m)
inv<-cacheSolve(x)
inv
#solve(m)
inv<-cacheSolve(x)
inv
x
inv<-cacheSolve(x)
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
print(m)
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
inv<-cacheSolve(x)
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
m
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
inv<-cacheSolve(x)
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getinverse()
if(!is.null(m)) {
#message("getting cached data")
m
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
inv<-cacheSolve(x)
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getinverse()
m
if(!is.null(m)) {
message("getting cached data")
m
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
inv<-cacheSolve(x)
inv
inv
inv<-1
inv
inv<-cacheSolve(x)
inv
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
m <- matrix(c(-1, -2, 1, 1,5,6,1,2,0.5), 3,3)
x <- makeCacheMatrix(m)
inv<-cacheSolve(x)
inv
inv<-cacheSolve(x)
inv
m <- matrix(c(-1, -2, 1, 1,5,6,1,2,0.5), 3,3)
x <- makeCacheMatrix(m)
inv<-cacheSolve(x)
inv
inv<-cacheSolve(x)
inv
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = numeric(matrix())) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x) {
m <- x$getinverse()
m
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
inv<-cacheSolve(x)
inv
m <- matrix(c(-1, -2, 1, 1,5,6,1,2,0.5), 3,3)
m
x <- makeCacheMatrix(m)
x
inv<-cacheSolve(x)
inv
m <- matrix(c(-1, -2, 1, 1,5,6,1,2,0.5), 3,3)
m
x <- makeCacheMatrix(m)
x
inv<-cacheSolve(x)
inv
inv<-cacheSolve(x)
inv
